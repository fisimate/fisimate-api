// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  fullname       String
  email          String         @unique
  nis            String?        @unique
  password       String?
  profilePicture String?        @map("profile_picture")
  roleId         String         @map("role_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @map("updated_at")
  refreshTokens  RefreshToken[]
  role           Role           @relation(fields: [roleId], references: [id])
  quizAttempt    QuizAttempt[]
}

model RefreshToken {
  id           String   @id @default(uuid())
  refreshToken String   @map("refresh_token")
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Role {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model Chapter {
  id            String         @id @default(uuid())
  name          String
  slug          String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  examBanks     ExamBank[]
  materialBanks MaterialBank[]
  formulaBanks  FormulaBank[]
  simulations   Simulation[]
}

model ExamBank {
  id        String   @id @default(uuid())
  title     String
  icon      String
  filePath  String   @map("file_path")
  chapterId String   @map("chapter_id")
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([chapterId])
}

model MaterialBank {
  id        String   @id @default(uuid())
  title     String
  icon      String
  filePath  String   @map("file_path")
  chapterId String   @map("chapter_id")
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([chapterId])
}

model FormulaBank {
  id        String   @id @default(uuid())
  title     String
  icon      String
  filePath  String   @map("file_path")
  chapterId String   @map("chapter_id")
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([chapterId])
}

model Simulation {
  id        String     @id @default(uuid())
  title     String
  icon      String
  chapterId String     @map("chapter_id")
  chapter   Chapter    @relation(fields: [chapterId], references: [id])
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  materials Material[]
  quizzes   Quiz[]

  @@index([chapterId])
}

model Material {
  id           String     @id @default(uuid())
  filePath     String     @map("file_path")
  simulationId String     @map("simulation_id")
  simulation   Simulation @relation(fields: [simulationId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")

  @@index([simulationId])
}

model Quiz {
  id           String        @id @default(uuid())
  simulationId String        @map("simulation_id")
  simulation   Simulation    @relation(fields: [simulationId], references: [id])
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  quizReviews  QuizReview[]
  questions    Question[]
  quizAttempt  QuizAttempt[]

  @@index([simulationId])
}

model Question {
  id               String             @id @default(uuid())
  text             String
  quizId           String             @map("quiz_id")
  quiz             Quiz               @relation(fields: [quizId], references: [id])
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @map("updated_at")
  quizOptions      QuizOption[]
  userQuizResponse UserQuizResponse[]

  @@index([quizId])
}

model QuizOption {
  id               String             @id @default(uuid())
  text             String
  isCorrect        Boolean            @map("is_correct")
  questionId       String             @map("question_id")
  question         Question           @relation(fields: [questionId], references: [id])
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @map("updated_at")
  userQuizResponse UserQuizResponse[]

  @@index([questionId])
}

model QuizReview {
  id        String   @id @default(uuid())
  filePath  String   @map("file_path")
  quizId    String   @map("quiz_id")
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([quizId])
}

model UserQuizResponse {
  id               String      @id @default(uuid())
  quizAttemptId    String      @map("quiz_attempt_id")
  questionId       String
  selectedOptionId String
  quizAttempt      QuizAttempt @relation(fields: [quizAttemptId], references: [id])
  question         Question    @relation(fields: [questionId], references: [id])
  selectedOption   QuizOption  @relation(fields: [selectedOptionId], references: [id])
}

model QuizAttempt {
  id               String             @id @default(uuid())
  quizId           String             @map("quiz_id")
  userId           String             @map("user_id")
  score            Float
  attemptAt        DateTime           @map("attempt_at")
  quiz             Quiz               @relation(fields: [quizId], references: [id])
  user             User               @relation(fields: [userId], references: [id])
  userQuizResponse UserQuizResponse[]
}
