// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  fullname           String
  email              String               @unique
  nis                String?              @unique
  password           String?
  profilePicture     String?              @map("profile_picture") @db.Text
  roleId             String               @map("role_id")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @map("updated_at")
  refreshTokens      RefreshToken[]
  role               Role                 @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizAttempt        QuizAttempt[]
  simulationProgress SimulationProgress[]
}

model RefreshToken {
  id           String   @id @default(uuid())
  refreshToken String   @map("refresh_token")
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Role {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model Chapter {
  id               String         @id @default(uuid())
  name             String
  slug             String
  icon             String?        @db.Text
  shortDescription String?        @map("short_description")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @map("updated_at")
  examBanks        ExamBank[]
  materialBanks    MaterialBank[]
  formulaBanks     FormulaBank[]
  simulations      Simulation[]
}

model ExamBank {
  id        String   @id @default(uuid())
  title     String
  icon      String   @db.Text
  filePath  String   @map("file_path") @db.Text
  chapterId String   @map("chapter_id")
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([chapterId])
}

model MaterialBank {
  id        String   @id @default(uuid())
  title     String
  icon      String   @db.Text
  filePath  String   @map("file_path") @db.Text
  chapterId String   @map("chapter_id")
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([chapterId])
}

model FormulaBank {
  id        String   @id @default(uuid())
  title     String
  icon      String   @db.Text
  filePath  String   @map("file_path") @db.Text
  chapterId String   @map("chapter_id")
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([chapterId])
}

model Simulation {
  id                 String               @id @default(uuid())
  title              String
  icon               String               @db.Text
  chapterId          String               @map("chapter_id")
  chapter            Chapter              @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @map("updated_at")
  materials          Material[]
  question           Question[]
  quizReview         QuizReview[]
  quizAttempt        QuizAttempt[]
  simulationProgress SimulationProgress[]

  @@index([chapterId])
}

model Material {
  id           String     @id @default(uuid())
  filePath     String     @map("file_path") @db.Text
  simulationId String     @map("simulation_id")
  simulation   Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")

  @@index([simulationId])
}

model Question {
  id               String             @id @default(uuid())
  text             String
  imageUrl         String?
  simulationId     String             @map("simulation_id")
  simulation       Simulation         @relation(fields: [simulationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @map("updated_at")
  quizOptions      QuizOption[]
  userQuizResponse UserQuizResponse[]

  @@index([simulationId])
}

model QuizOption {
  id               String             @id @default(uuid())
  text             String
  isCorrect        Boolean            @map("is_correct")
  questionId       String             @map("question_id")
  question         Question           @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @map("updated_at")
  userQuizResponse UserQuizResponse[]

  @@index([questionId])
}

model QuizReview {
  id           String     @id @default(uuid())
  filePath     String     @map("file_path") @db.Text
  simulationId String     @map("simulation_id")
  simulation   Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")

  @@index([simulationId])
}

model UserQuizResponse {
  id               String      @id @default(uuid())
  quizAttemptId    String      @map("quiz_attempt_id")
  questionId       String
  selectedOptionId String
  quizAttempt      QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  question         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  selectedOption   QuizOption  @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model QuizAttempt {
  id               String             @id @default(uuid())
  simulationId     String             @map("simulation_id")
  userId           String             @map("user_id")
  score            Float
  attemptAt        DateTime           @map("attempt_at")
  simulation       Simulation         @relation(fields: [simulationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userQuizResponse UserQuizResponse[]
}

model SimulationProgress {
  id           String   @id @default(uuid())
  userId       String
  simulationId String   @map("simulation_id")
  currentStep  Int      @default(0)
  totalSteps   Int      @default(3)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  simulation Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, simulationId])
}
